import { isUsingTypes, Types, CodegenPlugin } from '@graphql-codegen/plugin-helpers';
import addPlugin from '@graphql-codegen/add';
import { FragmentDefinitionNode } from 'graphql';

export type ImportTypesConfig = {
  /**
   * @description Required, should point to the base schema types file.
   * The key of the output is used a the base path for this file.
   *
   * @exampleMarkdown
   * ```yml
   * generates:
   *   path/to/file.ts:
   *     preset: import-types
   *     presetConfig:
   *       typesPath: types.ts
   *     plugins:
   *       - typescript-operations
   * ```
   */
  typesPath: string;
  /**
   * @description Optional, override the name of the import namespace used to import from the `baseTypesPath` file.
   * @default Types
   *
   * @exampleMarkdown
   * ```yml
   * generates:
   *   src/:
   *     preset: import-types
   *     presetConfig:
   *       typesPath: types.ts
   *       importTypesNamespace: SchemaTypes
   *     plugins:
   *       - typescript-operations
   * ```
   */
  importTypesNamespace?: string;
  /**
   * @description Optional, prevent override of types generated by plugins in the output file.
   *              Those plugins must implement importOperationTypesFrom to be compatible
   *              with this option.
   * @default false
   *
   * @exampleMarkdown
   * ```yml
   * generates:
   *   src/:
   *     preset: import-types
   *     presetConfig:
   *       typesPath: types.ts
   *       preservePluginsTypes: true
   *     plugins:
   *       - typescript-operations
   * ```
   */
  preservePluginsTypes?: boolean;
};

export type FragmentNameToFile = {
  [fragmentName: string]: { location: string; importName: string; onType: string; node: FragmentDefinitionNode };
};

export const preset: Types.OutputPreset<ImportTypesConfig> = {
  buildGeneratesSection: options => {
    const { typesPath, importTypesNamespace = 'Types', preservePluginsTypes = false } = options.presetConfig;

    if (!typesPath) {
      throw new Error(
        `Preset "import-types" requires you to specify "typesPath" configuration and point it to your base types file (generated by "typescript" plugin)!`
      );
    }

    const pluginMap: { [name: string]: CodegenPlugin } = {
      ...options.pluginMap,
      add: addPlugin,
    };
    const plugins = [...options.plugins];
    const config = {
      ...options.config,
      // This is for the operations plugin
      namespacedImportName: importTypesNamespace,
      // This is for the client-side runtime plugins
      importOperationTypesFrom: !preservePluginsTypes && importTypesNamespace,
      externalFragments: [],
    };
    options.documents.map(documentFile => {
      if (
        isUsingTypes(
          documentFile.document,
          config.externalFragments.map(m => m.name),
          options.schemaAst
        )
      ) {
        const importType = options.config.useTypeImports ? 'import type' : 'import';
        plugins.unshift({
          add: {
            content: `${importType} * as ${importTypesNamespace} from '${typesPath}';\n`,
          },
        });
      }
    });
    return [
      {
        filename: options.baseOutputDir,
        plugins,
        pluginMap,
        config,
        schema: options.schema,
        schemaAst: options.schemaAst,
        documents: options.documents,
      },
    ] as Types.GenerateOptions[] | null;
  },
};

export default preset;
